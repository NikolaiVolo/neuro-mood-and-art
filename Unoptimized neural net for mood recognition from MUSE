pip install muselsl

muselsl stream --name muse hand

pip install git+https://github.com/peplin/pygatt



!wget -q -O mindMonitor_a.csv https://drive.google.com/file/d/1V0MY_qOTNQfk0WF9HdvJ45ZTtspo0Bmh/view?usp=sharing

import scipy
import scipy.signal
import csv
import tensorflow as tf
from sklearn.metrics import confusion_matrix
import numpy as np
from scipy.io import loadmat
import os
from pywt import wavedec
from functools import reduce
from scipy import signal
from scipy.stats import entropy
from scipy.fft import fft, ifft
import pandas as pd
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.preprocessing import StandardScaler
from tensorflow import keras as K
import matplotlib.pyplot as plt
import scipy
from sklearn import metrics
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import KFold,cross_validate
from tensorflow.keras.layers import Dense, Activation, Flatten, concatenate, Input, Dropout, LSTM, Bidirectional,BatchNormalization,PReLU,ReLU,Reshape
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.metrics import classification_report
from tensorflow.keras.models import Sequential, Model, load_model
import matplotlib.pyplot as plt;
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from sklearn.decomposition import PCA
from sklearn.model_selection import cross_val_score
from tensorflow import keras
from tensorflow.keras.layers import Conv1D,Conv2D,Add
from tensorflow.keras.layers import MaxPool1D, MaxPooling2D
import seaborn as sns
import pandas as pd

# t = '2021-09-26 15:12:08.221,0.8325622976698801,0.8935598842426395,1.053035979936806,0.9667512335039063,0.9947497410078887,0.4671955322288008,0.7941689294470685,0.9819881712217566,0.7811484406236183,0.6772446953669817,1.133800731118649,0.9807797710473031,0.5889264223325102,0.1178484757050853,0.4091383527207125,0.6401596606612638,0.2332755997832033,-0.5136694282566894,0.2178746892437251,0.5795802369212162,858.2417582417582,877.5824175824176,867.5091575091575,1650,954.9450549450549,-0.273071,0.324463,0.910034,-22.475281,17.540588,-4.508514,1,1,1,1,1,81.750000'
# len(t.split(','))

data = pd.read_csv("/content/mindMonitor.csv")
print(data.info())

data.fillna(0)

pd.read_csv(file_name_2)

with open('/content/mindMonitor.csv', 'r') as csv_file:
 reader = csv.reader(csv_file)
for row in reader: 
 print(row)


f = open(file_name, mode='r+')

from google.colab import drive
drive.mount('/content/drive')

fft_data = data.loc[:,'fft_0_b':'fft_749_b']

data_2 = pd.read_csv("/emotions.csv")
print(data.info())

fft_data

fft_data.iloc[0,:].plot(figsize=(15,10))

data

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
data['label']=le.fit_transform(data['label'])

le

y = data.pop('label')
X = data
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=48)
X_train = np.array(X_train).reshape((X_train.shape[0],X_train.shape[1],1))
X_test = np.array(X_test).reshape((X_test.shape[0],X_test.shape[1],1))
y_train = pd.get_dummies(y_train)
y_test = pd.get_dummies(y_test)

y_train

inputs = tf.keras.Input(shape=(X_train.shape[1],1))

gru = tf.keras.layers.GRU(256, return_sequences=True)(inputs)
flat = Flatten()(gru)
outputs = Dense(3, activation='softmax')(flat)

model = tf.keras.Model(inputs, outputs)

model.summary()

tf.keras.utils.plot_model(model)

def train_model(model,x_train, y_train,x_test,y_test, save_to, epoch = 2):

        opt_adam = keras.optimizers.Adam(learning_rate=0.001)

        es = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=10)
        mc = ModelCheckpoint(save_to + '_best_model.h5', monitor='val_accuracy', mode='max', verbose=1, save_best_only=True)
        lr_schedule = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 0.001 * np.exp(-epoch / 10.))
        
        model.compile(optimizer=opt_adam,
                  loss=['categorical_crossentropy'],
                  metrics=['accuracy'])
        
        history = model.fit(x_train,y_train,
                        batch_size=32,
                        epochs=epoch,
                        validation_data=(x_test,y_test),
                        callbacks=[es,mc,lr_schedule])
        
        saved_model = load_model(save_to + '_best_model.h5')
        
        return model,history

model,history = train_model(model, X_train, y_train,X_test, y_test, save_to= './', epoch = 12) 

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# summarize history for loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

model_acc = model.evaluate(X_test, y_test, verbose=0)[1]
print("Test Accuracy: {:.3f}%".format(model_acc * 100))

y_pred = np.array(list(map(lambda x: np.argmax(x), model.predict(X_test))))
y_test = y_test.idxmax(axis=1)

cm = confusion_matrix(y_test, y_pred)
clr = classification_report(y_test, y_pred)

plt.figure(figsize=(8, 8))
sns.heatmap(cm, annot=True, vmin=0, fmt='g', cbar=False, cmap='Blues')
plt.xlabel("Желаемое")
plt.ylabel("Реальное")
plt.title("Непонятная матрица")
plt.show()

print("Classification Report:\n----------------------\n", clr)
